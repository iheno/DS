/* ==================== text ellipsis ==================== */
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: -webkit-box;
  -webkit-box-orient: vertical;
}

.ellipsis {
  &__one {
    @include ellipsis;
    -webkit-line-clamp: 1;
  }

  &__two {
    @include ellipsis;
    -webkit-line-clamp: 2;
  }

  &__three {
    @include ellipsis;
    -webkit-line-clamp: 3;
  }
}





/* ==================== bakcground-size: cover ====================  */
$imgUrl: "../img/" !default;
$myimg: "" !default;

@mixin bgSizeCover($width, $height, $myimg) {
  display: block;
  overflow: hidden;
  width: 100%;
  height: 0;
  padding-top: calc(#{($height / $width * 100%)});
  /* calc（image height / image weight * 100%） */

  background: {
    image: url($imgUrl + $myimg);
    size: cover;
    repeat: no-repeat;
    position: center center;
  }

  object-fit: cover;
}

@mixin bgSizeCover2($width, $height, $image: null) {
  display: block;
  overflow: hidden;
  width: 100%;
  height: 0;
  padding-top: ($height / $width) * 100%;

  @if $image !=null {
    background: url($image) 50% 50% no-repeat;
    background-size: cover;
  }

  object-fit: cover;
}

// export test
.sample-background-cover {
  @include bgSizeCover(960, 600, 'sample.jpg') //（image weight , image height , 'image type'） */
}

.sample-background-cover2 {
  @include bgSizeCover2(960, 600, '../img/sample.jpg') //（image weight , image height , 'image url'） */
}





/* ==================== When using ::before and ::after ====================  */
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// export test
.sample-pseudo::after {
  @include pseudo;
}





/* ==================== Circle ====================  */
@mixin circle($size) {
  width: $size;
  height: $size;
  border-radius: 100%;
}

// export test
.sample-circle {
  @include circle(100px);
}





/* ==================== Vendor Prefixing ====================  */
@mixin css3($property, $value) {

  @each $prefix in -webkit-,
  -moz-,
  -ms-,
  -o-,
  '' {
    #{$prefix}#{$property}: $value;
  }
}

// export test
.sample-Prefixing {
  @include css3(transition, 0.5s);
}





/* ==================== Opacity ====================  */
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacityIE: $opacity * 100;
  filter: alpha(opacity=$opacityIE);
}

// export test
.sample-Opacity {
  @include opacity(0.5);
}





/* ==================== clearfix ====================  */
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// export test
.sample-clearfix {
  @include clearfix;
}